name: apply multiple tofu environments
# This approach ensures that,
# - additional environments can be added without changing the workflow.
# - new environments are initialised with state file; see https://github.com/opentofu/opentofu/issues/2518
# - changes are applied to all environments separately.

on:
  workflow_call:

permissions:
  id-token: write
  contents: write
  actions: write

jobs:
  get-changed-environments:
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.get-changed-files.outputs.CHANGED_DIRS }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
        sparse-checkout: |
          tofu/

    - name: Get changed files
      id: get-changed-files
      run: |
        CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})
        echo "Changed files:"
        echo "$CHANGED_FILES"
        CHANGED_DIRS=$(for file in $CHANGED_FILES; do
          dirname "$file"
        done | sort | uniq | jq -Rsc '[split("\n") | map(select(. != ""))]')
        echo "Changed directories:"
        echo "$CHANGED_DIRS"
        echo "setting env var"
        echo "CHANGED_DIRS=$CHANGED_DIRS" >> $GITHUB_OUTPUT

  tofu-run:
    needs: get-changed-environments
    runs-on: ubuntu-latest
    strategy:
        matrix:
            environment: ${{ fromJSON(needs.get-changed-environments.outputs.environments) }}
    env:
      GITHUB_APP_ID: ${{ secrets.EVOTEUMBOT_APP_ID }}
      GITHUB_APP_INSTALLATION_ID: ${{ secrets.EVOTEUMBOT_APP_INSTALLATION_ID }}
      GITHUB_APP_PEM_FILE: ${{ secrets.EVOTEUMBOT_APP_PEM_FILE }}
      TF_VAR_aws_region: ${{ vars.AWS_REGION }}
      TF_VAR_org_name: ${{ github.repository_owner }}
      TF_VAR_repo_name: ${{ github.event.repository.name }}
      TF_VAR_repo_url: ${{ github.event.repository.html_url }}

    steps:
      - name: set additional env vars
        run: |
          export ENVIRONMENT=$(basename "${{ matrix.environment }}")
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
          echo "TF_VAR_environment=$ENVIRONMENT" >> $GITHUB_ENV
          echo "STATE_FILE_KEY=${{ github.event.repository.name }}/$ENVIRONMENT/tofu.tfstate" >> $GITHUB_ENV

      - name: Set up OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: 1.9.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: ${{ github.event.repository.name }}--${{ github.workflow }}--${{ github.run_number }}--${{ github.job }}

      - name: Checkout this repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          sparse-checkout: ${{ matrix.environment }}

      - name: initialise tofu
        run: |
            echo "===== Processing Environment: ${{ github.event.repository.name }}/$ENVIRONMENT ====="
            cd ${{ matrix.environment }}
            echo "Running tofu init for environment: $ENVIRONMENT"
            tofu init \
              -input=false \
              -backend-config="bucket=${{ secrets.TOFU_STATE_BUCKET_NAME }}" \
              -backend-config="key=$STATE_FILE_KEY" \
              -backend-config="region=${{ vars.AWS_REGION }}"

      - name: Build OpenTofu Plan
        id: tofu-plan
        run: |
          set -Eeuo pipefail
          echo "Building tofu plan for environment: ${{ github.event.repository.name }}/$ENVIRONMENT"
          cd ${{ matrix.environment }}
          tofu plan -input=false -out=tfplan | tee plan.txt
          tofu show -json tfplan > tfplan.json

      - name: Check OpenTofu Plan for changes
        id: tofu-check-plan
        run: |
          echo "Checking tofu plan for changes to environment:  ${{ github.event.repository.name }}/$ENVIRONMENT"
          cd ${{ matrix.environment }}
          if grep -q "No changes." plan.txt; then
            echo "changes=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "changes=true" >> $GITHUB_OUTPUT

      - name: Apply OpenTofu plan
        if: steps.tofu-check-plan.outputs.changes == 'true'
        run: |
          echo "Running tofu apply for environment: $ENVIRONMENT"
          cd ${{ matrix.environment }}
          tofu apply tfplan
          echo "Finished processing environment: $ENVIRONMENT"
