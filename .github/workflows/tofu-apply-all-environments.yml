name: all-environments-tofu-apply
# Deploy all changes to all environments.
# This approach ensures that,
# - additional environments can be added without changing the workflow.
# - new environments are initialised with state file; see https://github.com/opentofu/opentofu/issues/2518
# - changes are applied to all environments separately.

on:
  workflow_call:
    inputs:
      fail-fast:
        description: 'If true, cancel all in-progress and queued jobs in the matrix if any job in the matrix fails.'
        required: false
        default: true
        type: boolean
      environment-directories:
        description: 'Comma separated list of environment directories to apply changes to. If empty, all changed environments will be applied.'
        required: false
        type: string


permissions:
  id-token: write
  contents: write
  actions: write

jobs:
  get-environment-directories:
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.convert-to-json.outputs.ENVIRONMENTS }}
    steps:

    - name: Checkout repository if environment-directories is not provided
      if: ${{ !contains(inputs.environment-directories, 'tofu/') }}
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
        sparse-checkout: |
          tofu/

    - name: Convert environment directories to JSON for matrix consumption
      id: convert-to-json
      run: |
        if [ ! -z "${{ inputs.environment-directories }}" ]; then
          echo "Getting environment directories from input"
          echo "got input: ${{ inputs.environment-directories }}"
          ENVIRONMENT_DIRECTORIES_JSON=$(echo ${{ inputs.environment-directories }} | jq -Rsc 'split("\n") | map(split(",")[]) | map(select(startswith("tofu/")))')
          echo "ENVIRONMENTS=$ENVIRONMENT_DIRECTORIES_JSON"
          echo "ENVIRONMENTS=$ENVIRONMENT_DIRECTORIES_JSON" >> $GITHUB_OUTPUT
          exit 0
        fi
        echo "Getting environment directories from changed directories"
        CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})
        echo "Changed files:"
        echo "$CHANGED_FILES"
        CHANGED_DIRS=$(for file in $CHANGED_FILES; do
          dirname "$file"
        done | sort | uniq | jq -Rsc 'split("\n") | map(select(startswith("tofu/")))')
        echo "Changed directories:"
        echo "$CHANGED_DIRS"
        echo "setting env var"
        echo "ENVIRONMENTS=$CHANGED_DIRS" >> $GITHUB_OUTPUT


  tofu-run:
    needs: get-environment-directories
    runs-on: ubuntu-latest
    strategy:
      fail-fast: ${{ inputs.fail-fast }}
      matrix:
          environment: ${{ fromJSON(needs.get-environment-directories.outputs.ENVIRONMENTS) }}
    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      GITHUB_APP_ID: ${{ secrets.EVOTEUMBOT_APP_ID }}
      GITHUB_APP_INSTALLATION_ID: ${{ secrets.EVOTEUMBOT_APP_INSTALLATION_ID }}
      GITHUB_APP_PEM_FILE: ${{ secrets.EVOTEUMBOT_APP_PEM_FILE }}
      QUAY_OAUTH2_USERNAME: ${{ secrets.QUAY_OAUTH2_USERNAME }}
      QUAY_TOKEN: ${{ secrets.QUAY_TOKEN }}
      TF_VAR_aws_region: ${{ vars.AWS_REGION }}
      TF_VAR_cloudflare_account_id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      TF_VAR_organisation: ${{ github.repository_owner }}
      TF_VAR_quay_domain: ${{ vars.QUAY_DOMAIN }}
      TF_VAR_quay_repository_path: ${{ vars.QUAY_REPOSITORY_PATH }}
      TF_VAR_quay_url: ${{ vars.QUAY_URL }}
      TF_VAR_repo_name: ${{ github.event.repository.name }}
      TF_VAR_repo_url: ${{ github.event.repository.html_url }}
      TF_VAR_repository_name: ${{ github.event.repository.name }}

    steps:
      - name: Generate short-lived Cloudflare job token
        run: |
          export CLOUDFLARE_JOB_TOKEN=$(curl -X POST "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/api-tokens" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_TOKEN_MANAGER }}" \
            -H "Content-Type: application/json" \
            --data '{
              "name": "Short-Lived Job Token",
              "policy": [{
                "permission_groups": ["Zone.DNS", "Zone.Read"],
                "resources": { "com.cloudflare.api.account.${{ secrets.CLOUDFLARE_ACCOUNT_ID }}": "*" }
              }],
              "expires_on": "'$(date -u -d "+10 minutes" --iso-8601=seconds)'"
            }' | jq -r '.result.value')

          echo "::add-mask::$CLOUDFLARE_JOB_TOKEN" # Hide in logs
          echo "CLOUDFLARE_API_TOKEN=$CLOUDFLARE_JOB_TOKEN" >> $GITHUB_ENV

      - name: set additional env vars
        run: |
          export ENVIRONMENT=$(basename "${{ matrix.environment }}")
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
          echo "TF_VAR_environment=$ENVIRONMENT" >> $GITHUB_ENV
          echo "STATE_FILE_KEY=${{ github.event.repository.name }}/$ENVIRONMENT/tofu.tfstate" >> $GITHUB_ENV

      - name: Set up OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: 1.9.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: ${{ github.event.repository.name }}--${{ github.workflow }}--${{ github.run_number }}--${{ github.job }}

      - name: Checkout this repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          sparse-checkout: ${{ matrix.environment }}

      - name: initialise tofu
        run: |
            echo "===== Processing Environment: ${{ github.event.repository.name }}/$ENVIRONMENT ====="
            cd ${{ matrix.environment }}
            echo "Running tofu init for environment: $ENVIRONMENT"
            tofu init \
              -input=false \
              -backend-config="bucket=${{ secrets.TOFU_STATE_BUCKET_NAME }}" \
              -backend-config="key=$STATE_FILE_KEY" \
              -backend-config="region=${{ vars.AWS_REGION }}"

      - name: Build OpenTofu Plan
        id: tofu-plan
        run: |
          set -Eeuo pipefail
          echo "Building tofu plan for environment: ${{ github.event.repository.name }}/$ENVIRONMENT"
          cd ${{ matrix.environment }}
          tofu plan -input=false -out=tfplan | tee plan.txt
          tofu show -json tfplan > tfplan.json

      - name: Check OpenTofu Plan for changes
        id: tofu-check-plan
        run: |
          echo "Checking tofu plan for changes to environment:  ${{ github.event.repository.name }}/$ENVIRONMENT"
          cd ${{ matrix.environment }}
          if grep -q "No changes." plan.txt; then
            echo "No changes detected, time for coffee"
            echo "changes=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "Changes detected, lets a go!"
          echo "changes=true" >> $GITHUB_OUTPUT

      - name: Apply OpenTofu plan
        if: steps.tofu-check-plan.outputs.changes == 'true'
        run: |
          echo "Running tofu apply for environment: $ENVIRONMENT"
          cd ${{ matrix.environment }}
          tofu apply tfplan
          echo "Finished processing environment: $ENVIRONMENT"
