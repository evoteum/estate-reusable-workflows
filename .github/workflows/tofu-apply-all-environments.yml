name: tofu-apply-all-environments
# Deploy all changes to all environments.
# This approach ensures that,
# - additional environments can be added without changing the workflow.
# - changes are applied to all environments separately.

on:
  workflow_call:
    inputs:
      fail_fast:
        description: 'If true, cancel all in-progress and queued jobs in the matrix if any job in the matrix fails.'
        required: false
        default: true
        type: boolean
      environments:
        description: 'Comma separated list of environment directories to apply changes to. If empty, all environments will be applied.'
        required: false
        type: string


permissions:
  id-token: write
  contents: write
  actions: write

jobs:
  get-environment-directories:
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.input-dirs.outputs.ENVIRONMENTS || steps.push-changes.outputs.ENVIRONMENTS || steps.all-dirs.outputs.ENVIRONMENTS }}
    steps:
      - name: Checkout repository
        if: ${{ !contains(inputs.environments, 'tofu/') }}
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ github.event_name == 'push' && 2 || 1 }}
          sparse-checkout: |
            tofu/

      - name: Get environments from input directories
        if: inputs.environments != ''
        id: input-dirs
        run: |
          ENVIRONMENTS_JSON=$(echo ${{ inputs.environments }} | jq -Rsc 'split("\n") | map(split(",")[]) | map(select(startswith("tofu/") or length > 0)) | map(if startswith("tofu/") then . else "tofu/"+. end)')

          if [ "$ENVIRONMENTS_JSON" == "[]" ]; then
            echo "No valid directories provided in input"
            exit 1
          fi
          echo "Input directories after processing:"
          echo "$ENVIRONMENTS_JSON" | jq '.'
          echo "ENVIRONMENTS=$ENVIRONMENTS_JSON" >> $GITHUB_OUTPUT

      - name: Get environments from push event changes
        if: ${{ github.event_name == 'push' && inputs.environments == '' }}
        id: push-changes
        run: |
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})
          echo "Changed files:"
          echo "$CHANGED_FILES"
          CHANGED_DIRS=$(for file in $CHANGED_FILES; do
            dirname "$file"
          done | sort | uniq | jq -Rsc 'split("\n") | map(select(startswith("tofu/")))')
          if [ "$CHANGED_DIRS" == "[]" ]; then
            echo "No changes detected in tofu directories"
            exit 1
          fi
          echo "Changed directories:"
          echo "$CHANGED_DIRS"
          echo "ENVIRONMENTS=$CHANGED_DIRS" >> $GITHUB_OUTPUT

      - name: Get environments from all tofu directories
        if: ${{ inputs.environments == '' && github.event_name != 'push' }}
        id: all-dirs
        run: |
          ALL_DIRS=$(find tofu -maxdepth 1 -mindepth 1 -type d | jq -Rsc 'split("\n") | map(select(length > 0))')
          if [ "$ALL_DIRS" == "[]" ]; then
            echo "No tofu directories found"
            exit 1
          fi
          echo "All tofu directories:"
          echo "$ALL_DIRS"
          echo "ENVIRONMENTS=$ALL_DIRS" >> $GITHUB_OUTPUT

  tofu-run:
    needs: get-environment-directories
    runs-on: ubuntu-latest
    strategy:
      fail-fast: ${{ inputs.fail_fast }}
      matrix:
          environment: ${{ fromJSON(needs.get-environment-directories.outputs.ENVIRONMENTS) }}
    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      GITHUB_APP_ID: ${{ secrets.EVOTEUMBOT_APP_ID }}
      GITHUB_APP_INSTALLATION_ID: ${{ secrets.EVOTEUMBOT_APP_INSTALLATION_ID }}
      GITHUB_APP_PEM_FILE: ${{ secrets.EVOTEUMBOT_APP_PEM_FILE }}
      QUAY_OAUTH2_USERNAME: ${{ secrets.QUAY_OAUTH2_USERNAME }}
      QUAY_TOKEN: ${{ secrets.QUAY_TOKEN }}
      QUAY_URL: ${{ vars.QUAY_URL }}
      TF_VAR_aws_region: ${{ vars.AWS_REGION }}
      TF_VAR_cloudflare_account_id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      TF_VAR_cloudflare_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
      TF_VAR_homepage_url: ${{ github.event.repository.homepage }}
      TF_VAR_organisation: ${{ github.repository_owner }}
      TF_VAR_quay_domain: ${{ vars.QUAY_DOMAIN }}
      TF_VAR_quay_repository_path: ${{ vars.QUAY_REPOSITORY_PATH }}
      TF_VAR_quay_url: ${{ vars.QUAY_URL }}
      TF_VAR_repo_name: ${{ github.event.repository.name }}
      TF_VAR_repo_url: ${{ github.event.repository.html_url }}
      TF_VAR_repository_name: ${{ github.event.repository.name }}

    steps:
      - name: set additional env vars
        run: |
          export ENVIRONMENT=$(basename "${{ matrix.environment }}")
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
          echo "TF_VAR_environment=$ENVIRONMENT" >> $GITHUB_ENV
          echo "STATE_FILE_KEY=${{ github.event.repository.name }}/$ENVIRONMENT/tofu.tfstate" >> $GITHUB_ENV

      - name: Set up OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: 1.9.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: ${{ github.event.repository.name }}--${{ github.workflow }}--${{ github.run_number }}--${{ github.job }}

      - name: Checkout this repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          sparse-checkout: ${{ matrix.environment }}

      - name: initialise tofu
        run: |
            echo "===== Processing Environment: ${{ github.event.repository.name }}/$ENVIRONMENT ====="
            cd ${{ matrix.environment }}
            echo "Running tofu init for environment: $ENVIRONMENT"
            tofu init \
              -input=false \
              -backend-config="bucket=${{ secrets.TOFU_STATE_BUCKET_NAME }}" \
              -backend-config="key=$STATE_FILE_KEY" \
              -backend-config="region=${{ vars.AWS_REGION }}"

      - name: Build OpenTofu Plan
        id: tofu-plan
        run: |
          set -Eeuo pipefail
          echo "Building tofu plan for environment: ${{ github.event.repository.name }}/$ENVIRONMENT"
          cd ${{ matrix.environment }}
          tofu plan -input=false -out=tfplan | tee plan.txt
          tofu show -json tfplan > tfplan.json

      - name: Check OpenTofu Plan for changes
        id: tofu-check-plan
        run: |
          echo "Checking tofu plan for changes to environment:  ${{ github.event.repository.name }}/$ENVIRONMENT"
          cd ${{ matrix.environment }}
          if grep -q "No changes." plan.txt; then
            echo "No changes detected, time for coffee"
            echo "changes=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "Changes detected, lets a go!"
          echo "changes=true" >> $GITHUB_OUTPUT

      - name: Apply OpenTofu plan
        if: steps.tofu-check-plan.outputs.changes == 'true'
        run: |
          echo "Running tofu apply for environment: $ENVIRONMENT"
          cd ${{ matrix.environment }}
          tofu apply tfplan
          echo "Finished processing environment: $ENVIRONMENT"
